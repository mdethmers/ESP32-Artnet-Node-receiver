/**
 * ArtNet LED Controller for ESP32
 * Controls multiple LED strips via ArtNet protocol over Ethernet or WiFi
 * Provides web interface for configuration and supports static colors and test patterns
 */

// Feature configuration
#define DEBUG_ETHERNET_WEBSERVER_PORT Serial
#define _ETHERNET_WEBSERVER_LOGLEVEL_ 1  // Reduced log level for less overhead
#define UNIQUE_SUBARTNET

// LED configuration
#define NUM_LEDS_PER_STRIP 680        // Maximum number of LEDs per strip
#define NUMSTRIPS 4                   // Maximum number of LED strips
#define NB_CHANNEL_PER_LED 3          // Number of channels per LED (3 for RGB, 4 for RGBW)
#define UNIVERSE_SIZE_IN_CHANNEL 510  // Size of a universe (170 pixels * 3 channels)
#define COLOR_RBG                     // Define color order (Green-Red-Blue)

// Hardware configuration
#define STATUS_LED_PIN 16
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
#define OLED_RESET 4
#define SCREEN_ADDRESS 0x3C

// Include necessary libraries
#include <Preferences.h>
#include <WebServer_ESP32_W5500.h>
#include <WebServer.h>
#include "I2SClocklessLedDriver.h"
#include "Arduino.h"
#include "artnetESP32V2.h"
#include <Adafruit_NeoPixel.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Update.h>

// Default pin configuration
const int DEFAULT_PINS[NUMSTRIPS] = {12, 14, 27, 26};

// Forward declarations for functions
void setupWiFi();
void setupEthernet();
void startAPMode();
void cycleLEDs();
void setStatusLED(uint8_t r, uint8_t g, uint8_t b);
void applyStaticColor();
void loadSettings();
void saveSettings();
void handleRoot();
void handleConfig();
void resetToDefaultPins();
void updateStripPins();
void displayStatus(const String& line1, const String& line2 = "", const String& line3 = "", const String& line4 = "");
void displayConnectionStatus(const String& type, int remainingTime = -1);
void handleOTAUpdate();
void handleDoUpdate();
void printOTAProgress(size_t prg, size_t sz);

// Configuration structure
struct Settings {
  int numLedsPerOutput = 680;
  int numOutputs = 4;
  int startUniverse = 0;
  int pins[NUMSTRIPS] = {12, 14, 27, 26};
  int ledBrightness = 255;
  String nodeName = "Artnet Node ESP32";
  String ssid = "";
  String password = "";
  bool useWiFi = false;
  String staticColor = "#000000";
  bool enStatColor = false;
  bool enableCustomPins = false;
  bool ledCycleEnabled = false; 
  bool useStaticIP = false;
  String staticIP = "192.168.1.100";
  String gateway = "192.168.1.1";
  String subnet = "255.255.255.0";
};

// Runtime state
struct State {
  bool isAPMode = false;
  bool ledCycleEnabled = false;
  bool isStaticColorSet = false;
  uint8_t currentColor = 0;  // 0 = Red, 1 = Green, 2 = Blue
  unsigned long lastUpdate = 0;
  unsigned long startAttemptTime = 0;
  bool ledState = false;
};

// Constants
const unsigned long CONNECTION_TIMEOUT = 30000; // 30 seconds timeout
const unsigned long CYCLE_DELAY = 1000;         // Change color every 1 second

// Global objects
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
Adafruit_NeoPixel StatusLed(1, STATUS_LED_PIN, NEO_GRB + NEO_KHZ800);
WebServer server(80);
Preferences preferences;
artnetESP32V2 artnet = artnetESP32V2();
I2SClocklessLedDriver driver;

// LED storage
uint8_t ledData[NB_CHANNEL_PER_LED * NUMSTRIPS * NUM_LEDS_PER_STRIP];

// Settings and state
Settings settings;
State state;

// LED strip objects
Adafruit_NeoPixel strips[NUMSTRIPS] = {
  Adafruit_NeoPixel(NUM_LEDS_PER_STRIP, DEFAULT_PINS[0], NEO_BRG + NEO_KHZ800),
  Adafruit_NeoPixel(NUM_LEDS_PER_STRIP, DEFAULT_PINS[1], NEO_BRG + NEO_KHZ800),
  Adafruit_NeoPixel(NUM_LEDS_PER_STRIP, DEFAULT_PINS[2], NEO_BRG + NEO_KHZ800),
  Adafruit_NeoPixel(NUM_LEDS_PER_STRIP, DEFAULT_PINS[3], NEO_BRG + NEO_KHZ800)
};

// ArtNet callback function
void displayfunction(void *param) {
  subArtnet *subartnet = (subArtnet *)param;
  driver.showPixels(NO_WAIT, subartnet->data);
}

/**
 * Main setup function
 */
void setup() {
  Serial.begin(115200);
  
  // Initialize status LED
  StatusLed.begin();
  setStatusLED(255, 255, 0);  // Yellow during initialization
  
  // Initialize OLED display
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
  }
  displayStatus("Initializing...");
  
  // Load settings from preferences
  loadSettings();
  
  // Update strip pins based on loaded settings
  updateStripPins();
  
  // Initialize LED driver
  driver.initled(ledData, settings.pins, NUMSTRIPS, NUM_LEDS_PER_STRIP);
  driver.setBrightness(settings.ledBrightness);
  
  // Initialize networking
  state.startAttemptTime = millis();
  if (settings.useWiFi) {
    setupWiFi();
  } else {
    setupEthernet();
  }
  
  // If not in AP mode, set up ArtNet
  if (!state.isAPMode) {
    IPAddress activeIP = settings.useWiFi ? WiFi.localIP() : ETH.localIP();
    
    // Update display with connection info
    String ipStr = activeIP.toString();
    String ledsInfo = "LEDs:" + String(settings.numLedsPerOutput) + 
                      " Out:" + String(settings.numOutputs);
    displayStatus(settings.nodeName, ipStr, ledsInfo);
    
    // Initialize ArtNet
    artnet.addSubArtnet(
      settings.startUniverse, 
      settings.numLedsPerOutput * settings.numOutputs * NB_CHANNEL_PER_LED, 
      UNIVERSE_SIZE_IN_CHANNEL, 
      &displayfunction
    );
    artnet.setNodeName(settings.nodeName);
    
    if (artnet.listen(activeIP, 6454)) {
      Serial.print("Artnet Listening on IP: ");
      Serial.println(activeIP);
    }
  }
}

/**
 * Main loop function
 */
void loop() {
  // Handle web server requests
  server.handleClient();
  
  // Check network status
  if (!state.isAPMode) {
    bool networkDisconnected = (settings.useWiFi && WiFi.status() != WL_CONNECTED) || 
                             (!settings.useWiFi && (ETH.localIP() == INADDR_NONE));
    
    if (networkDisconnected) {
      Serial.println("Network disconnected, restarting AP mode...");
      startAPMode();
    }
  }
  
  // Handle LED test cycle or static color
  if (settings.enStatColor && !state.isStaticColorSet) {
    applyStaticColor();
    state.isStaticColorSet = true;
  } else if (settings.ledCycleEnabled) {
    cycleLEDs();
    state.isStaticColorSet = false;
  } else if (!settings.enStatColor) {
    state.isStaticColorSet = false;
  }
}

/**
 * Update all LED strip pins according to settings
 */
void updateStripPins() {
  for (int i = 0; i < NUMSTRIPS; i++) {
    if (strips[i].getPin() != settings.pins[i]) {
      Serial.printf("Strip %d pin changed from %d to %d\n", 
                    i, strips[i].getPin(), settings.pins[i]);
      
      strips[i].setPin(settings.pins[i]);
      strips[i].begin();
    }
  }
}

/**
 * Load settings from preferences
 */
void loadSettings() {
  preferences.begin("esp32config", true);
  
  settings.numLedsPerOutput = preferences.getInt("numledsoutput", settings.numLedsPerOutput);
  settings.numOutputs = preferences.getInt("numoutput", settings.numOutputs);
  settings.startUniverse = preferences.getInt("startuniverse", settings.startUniverse);
  settings.nodeName = preferences.getString("nodename", settings.nodeName);
  settings.ledBrightness = preferences.getInt("ledbrightness", settings.ledBrightness);
  settings.ssid = preferences.getString("ssid", settings.ssid);
  settings.password = preferences.getString("password", settings.password);
  settings.useWiFi = preferences.getBool("useWiFi", settings.useWiFi);
  settings.staticColor = preferences.getString("staticColor", settings.staticColor);
  settings.enStatColor = preferences.getBool("enStatColor", settings.enStatColor);
  settings.enableCustomPins = preferences.getBool("enCustomPins", false);
  settings.ledCycleEnabled = preferences.getBool("ledCycleEnabled", false);
  settings.useStaticIP = preferences.getBool("useStaticIP", settings.useStaticIP);
  settings.staticIP = preferences.getString("staticIP", settings.staticIP);
  settings.gateway = preferences.getString("gateway", settings.gateway);
  settings.subnet = preferences.getString("subnet", settings.subnet);
  
  // Load pins
  for (int i = 0; i < NUMSTRIPS; i++) {
    char pinKey[10];
    sprintf(pinKey, "pin%d", i);
    settings.pins[i] = preferences.getInt(pinKey, DEFAULT_PINS[i]);
  }
  
  // If custom pins not enabled, use default pins
  if (!settings.enableCustomPins) {
    for (int i = 0; i < NUMSTRIPS; i++) {
      settings.pins[i] = DEFAULT_PINS[i];
    }
  }
  
  preferences.end();
}

/**
 * Reset pins to default values
 */
void resetToDefaultPins() {
  for (int i = 0; i < NUMSTRIPS; i++) {
    settings.pins[i] = DEFAULT_PINS[i];
  }
}

/**
 * Save settings to preferences
 */
void saveSettings() {
  preferences.begin("esp32config", false);
  
  preferences.putInt("numledsoutput", settings.numLedsPerOutput);
  preferences.putInt("numoutput", settings.numOutputs);
  preferences.putInt("startuniverse", settings.startUniverse);
  preferences.putString("nodename", settings.nodeName);
  preferences.putInt("ledbrightness", settings.ledBrightness);
  preferences.putString("ssid", settings.ssid);
  preferences.putString("password", settings.password);
  preferences.putBool("useWiFi", settings.useWiFi);
  preferences.putString("staticColor", settings.staticColor);
  preferences.putBool("enStatColor", settings.enStatColor);
  preferences.putBool("enCustomPins", settings.enableCustomPins);
  preferences.putBool("ledCycleEnabled", settings.ledCycleEnabled);
  preferences.putBool("useStaticIP", settings.useStaticIP);
  preferences.putString("staticIP", settings.staticIP);
  preferences.putString("gateway", settings.gateway);
  preferences.putString("subnet", settings.subnet);
  
  // Save pins
  for (int i = 0; i < NUMSTRIPS; i++) {
    char pinKey[10];
    sprintf(pinKey, "pin%d", i);
    preferences.putInt(pinKey, settings.pins[i]);
  }
  
  preferences.end();
}

/**
 * Display multiple lines on the OLED screen
 */
void displayStatus(const String& line1, const String& line2, const String& line3, const String& line4) {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  
  display.setCursor(0, 0);
  display.println(line1);
  
  if (line2.length() > 0) {
    display.setCursor(0, 9);
    display.println(line2);
  }
  
  if (line3.length() > 0) {
    display.setCursor(0, 18);
    display.println(line3);
  }
  
  if (line4.length() > 0) {
    display.setCursor(0, 27);
    display.println(line4);
  }
  
  display.display();
}

/**
 * Display connection status with timeout
 */
void displayConnectionStatus(const String& type, int remainingTime) {
  String line1 = "Connecting to " + type;
  String line2 = "";
  
  if (remainingTime >= 0) {
    line2 = "Timeout in: " + String(remainingTime) + "s";
  }
  
  displayStatus(line1, line2);
}

/**
 * Set up WiFi connection
 */
void setupWiFi() {
  if (settings.useStaticIP) {
    IPAddress ip, gateway, subnet;
    if (ip.fromString(settings.staticIP) && 
        gateway.fromString(settings.gateway) && 
        subnet.fromString(settings.subnet)) {
      WiFi.config(ip, gateway, subnet);
    } else {
      Serial.println("Invalid static IP configuration");
    }
  }

  WiFi.begin(settings.ssid.c_str(), settings.password.c_str());
  displayStatus("Connecting to Wi-Fi...");
  
  while (millis() - state.startAttemptTime < CONNECTION_TIMEOUT) {
    int remainingTime = (CONNECTION_TIMEOUT - (millis() - state.startAttemptTime)) / 1000;
    
    // Toggle status LED
    state.ledState = !state.ledState;
    setStatusLED(state.ledState ? 255 : 0, 0, 0);
    
    displayConnectionStatus("Wi-Fi", remainingTime);
    
    // Check if connected
    if (WiFi.status() == WL_CONNECTED) {
      // Set up web server
      server.on("/", HTTP_GET, handleRoot);
      server.on("/config", HTTP_POST, handleConfig);
      server.on("/update", HTTP_GET, handleOTAUpdate);
      server.on("/doUpdate", HTTP_POST, handleOTAUpdateResponse, handleDoUpdate);
      server.begin();
      
      displayStatus("Wi-Fi connected", settings.ssid);
      setStatusLED(0, 255, 0);
      return;
    }
    
    delay(1000);
  }
  
  // If connection failed
  startAPMode();
}

/**
 * Set up Ethernet connection
 */
void setupEthernet() {
  displayStatus("Initializing Ethernet");
  
  ESP32_W5500_onEvent();
  ETH.begin(MISO_GPIO, MOSI_GPIO, SCK_GPIO, CS_GPIO, INT_GPIO, SPI_CLOCK_MHZ, ETH_SPI_HOST);

  // Configure static IP if enabled
  if (settings.useStaticIP) {
    IPAddress ip, gateway, subnet;
    if (ip.fromString(settings.staticIP) && 
        gateway.fromString(settings.gateway) && 
        subnet.fromString(settings.subnet)) {
      ETH.config(ip, gateway, subnet);
      Serial.println("Using static IP: " + settings.staticIP);
    } else {
      Serial.println("Invalid static IP configuration, using DHCP");
    }
  }
  
  while (millis() - state.startAttemptTime < CONNECTION_TIMEOUT) {
    int remainingTime = (CONNECTION_TIMEOUT - (millis() - state.startAttemptTime)) / 1000;
    
    // Check if we have a valid IP
    if (ETH.localIP() != INADDR_NONE) {
      // Set up web server routes
      server.on("/", HTTP_GET, handleRoot);
      server.on("/config", HTTP_POST, handleConfig);
      server.on("/update", HTTP_GET, handleOTAUpdate);
      server.on("/doUpdate", HTTP_POST, handleOTAUpdateResponse, handleDoUpdate);
      server.begin();
      
      displayStatus("Ethernet connected", 
                    settings.useStaticIP ? "Static: " + settings.staticIP : "DHCP: " + ETH.localIP().toString());
      setStatusLED(0, 255, 0);
      return;
    }
    
    // Toggle status LED
    state.ledState = !state.ledState;
    setStatusLED(state.ledState ? 255 : 0, 0, 0);
    displayConnectionStatus("Ethernet", remainingTime);
    
    delay(1000);
  }
  
  // If Ethernet connection fails
  startAPMode();
}

/**
 * Start Access Point mode
 */
void startAPMode() {
  state.isAPMode = true;
  WiFi.softAP(settings.nodeName.c_str());
  IPAddress IP = WiFi.softAPIP();
  
  // Set up web server
  server.on("/", HTTP_GET, handleRoot);
  server.on("/config", HTTP_POST, handleConfig);
  server.on("/update", HTTP_GET, handleOTAUpdate);
  server.on("/doUpdate", HTTP_POST, handleOTAUpdateResponse, handleDoUpdate);
  server.begin();
  
  // Set status LED to blue
  setStatusLED(0, 0, 255);
  
  // Update display
  displayStatus("AP Mode", settings.nodeName, "IP:" + IP.toString());
}

/**
 * Cycle LEDs through RGB test pattern
 */
void cycleLEDs() {
  if (millis() - state.lastUpdate >= CYCLE_DELAY) {
    state.lastUpdate = millis();
    
    // Determine color based on cycle
    uint32_t color;
    switch (state.currentColor) {
      case 0: color = strips[0].Color(settings.ledBrightness, 0, 0); break;  // Red
      case 1: color = strips[0].Color(0, settings.ledBrightness, 0); break;  // Green
      case 2: color = strips[0].Color(0, 0, settings.ledBrightness); break;  // Blue
    }
    
    // Apply color to all strips
    for (int i = 0; i < settings.numOutputs; i++) {
      for (int j = 0; j < settings.numLedsPerOutput; j++) {
        strips[i].setPixelColor(j, color);
      }
      strips[i].show();
    }
    
    // Move to the next color in cycle
    state.currentColor = (state.currentColor + 1) % 3;
  }
}

/**
 * Set status LED color
 */
void setStatusLED(uint8_t r, uint8_t g, uint8_t b) {
  StatusLed.setPixelColor(0, StatusLed.Color(r/2, g/2, b/2));  // Reduce brightness
  StatusLed.show();
}

/**
 * Apply static color to all LEDs
 */
void applyStaticColor() {
  if (!settings.enStatColor) return;
  
  uint32_t color = strtol(settings.staticColor.substring(1).c_str(), NULL, 16);
  for (int i = 0; i < settings.numOutputs; i++) {
    for (int j = 0; j < settings.numLedsPerOutput; j++) {
      strips[i].setPixelColor(j, color);
    }
    strips[i].show();
  }
}

/**
 * CSS styles for web interface
 */
const char* const CSS_STYLES = R"(
body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f4f4f4; color: #333; text-align: center; }
h1 { font-size: 24px; margin-bottom: 20px; }
form { background-color: #fff; padding: 20px; padding-right: 40px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); max-width: 400px; margin: auto; }
input[type='text'], input[type='number'] { width: 100%; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-radius: 4px; font-size: 16px; }
input[type='submit'] { background-color: #4CAF50; color: white; border: none; padding: 12px; font-size: 16px; cursor: pointer; border-radius: 4px; width: 100%; }
input[type='submit']:hover { background-color: #45a049; }
.warning { margin-top: 20px; color: #d9534f; font-size: 14px; }
.pin-input { width: 60px !important; display: inline-block; margin-right: 10px; }
.pin-container { margin: 10px 0; }
.pin-label { display: inline-block; width: 100px; text-align: left; }
.default-pin { color: #666; font-size: 0.9em; margin-left: 5px; }
)";

/**
 * JavaScript for web interface
 */
const char* const JS_CODE = R"(
function togglePinInputs() {
  var container = document.getElementById('pin-container');
  var enableCustomPins = document.getElementById('enableCustomPins').checked;
  container.style.display = enableCustomPins ? 'block' : 'none';
}

function toggleStaticIP() {
  var container = document.getElementById('static-ip-container');
  var useStaticIP = document.getElementById('useStaticIP').checked;
  container.style.display = useStaticIP ? 'block' : 'none';
}

window.onload = function() {
  togglePinInputs();
  toggleStaticIP();
};
)";

/**
 * Handle root page of web server
 */
void handleRoot() {
  String content = F("<!DOCTYPE html><html><head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");  
  content += F("<link rel=\"icon\" href=\"data:,\">");
  content += F("<style>");
  content += CSS_STYLES;
  content += F("</style>");
  content += F("<script>");
  content += JS_CODE;
  content += F("</script>");
  content += F("</head>");
  content += F("<body><h1>");
  content += settings.nodeName;
  content += F(" Configuration</h1>");
  content += F("<form method='POST' action='/config'>");
  
  // Node settings
  content += F("<label for='nodename'>Artnet Node name:</label>");
  content += F("<input type='text' id='nodename' name='nodename' value='");
  content += settings.nodeName;
  content += F("'><br>");
  
  // LED settings
  content += F("<label for='numledsoutput'>Number of LEDs per output (Max. 680):</label>");
  content += F("<input type='text' id='numledsoutput' name='numledsoutput' value='");
  content += String(settings.numLedsPerOutput);
  content += F("'><br>");
  
  content += F("<label for='numoutput'>Number of outputs (Max. 4):</label>");
  content += F("<input type='text' id='numoutput' name='numoutput' value='");
  content += String(settings.numOutputs);
  content += F("'><br>");
  
  content += F("<label for='startuniverse'>Start universe:</label>");
  content += F("<input type='text' id='startuniverse' name='startuniverse' value='");
  content += String(settings.startUniverse);
  content += F("'><br>");
  
  // Brightness slider
  content += F("<label for='ledbrightness'>Max. LED brightness:</label>");
  content += F("<input type='range' id='ledbrightness' name='ledbrightness' min='0' max='255' value='");
  content += String(settings.ledBrightness);
  content += F("' oninput='brightnessValue.value=this.value'>");
  content += F("<output id='brightnessValue'>");
  content += String(settings.ledBrightness);
  content += F("</output><br>");
  
  // Color settings
  content += F("<label for='staticColor'>Static RGB Color (Hex):</label>");
  content += F("<input type='color' id='staticColor' name='staticColor' value='");
  content += settings.staticColor;
  content += F("'><br>");
  
  content += F("<label for='enStatColor'>Enable Static Color:</label>");
  content += F("<input type='checkbox' id='enStatColor' name='enStatColor' ");
  content += settings.enStatColor ? F("checked") : F("");
  content += F("><br>");

  content += F("<label for='ledCycleEnabled'>Enable RGB Test Cycle:</label>");
  content += F("<input type='checkbox' id='ledCycleEnabled' name='ledCycleEnabled' ");
  content += settings.ledCycleEnabled ? F("checked") : F("");
  content += F("><br>");
  
  // Custom pin configuration
  content += F("<label for='enableCustomPins'>Enable Custom Pin Configuration:</label>");
  content += F("<input type='checkbox' id='enableCustomPins' name='enableCustomPins' onchange='togglePinInputs()' ");
  content += settings.enableCustomPins ? F("checked") : F("");
  content += F("><br>");
  
  // Pin input fields
  content += F("<div id='pin-container' class='pin-container' style='padding: 10px; margin-top: 10px; background-color: #f9f9f9; border-radius: 5px;'>");
  for (int i = 0; i < NUMSTRIPS; i++) {
    content += F("<div>");
    content += F("<span class='pin-label'>Output ");
    content += String(i+1);
    content += F(" Pin:</span>");
    content += F("<input type='number' class='pin-input' id='pin");
    content += String(i);
    content += F("' name='pin");
    content += String(i);
    content += F("' min='0' max='39' value='");
    content += String(settings.pins[i]);
    content += F("'>");
    content += F("<span class='default-pin'>(Default: ");
    content += String(DEFAULT_PINS[i]);
    content += F(")</span></div>");
  }
  content += F("</div>");

  // In handleRoot(), modify the static IP section:
  content += F("<label for='useStaticIP'>Use Static IP:</label>");
  content += F("<input type='checkbox' id='useStaticIP' name='useStaticIP' onchange='toggleStaticIP()' ");
  content += settings.useStaticIP ? F("checked") : F("");
  content += F("><br>");

  content += F("<div id='static-ip-container' style='display: none;'>");
  content += F("<label for='staticIP'>Static IP:</label>");
  content += F("<input type='text' id='staticIP' name='staticIP' value='");
  content += settings.staticIP;
  content += F("' placeholder='192.168.1.100'><br>");

  content += F("<label for='gateway'>Gateway:</label>");
  content += F("<input type='text' id='gateway' name='gateway' value='");
  content += settings.gateway;
  content += F("' placeholder='192.168.1.1'><br>");

  content += F("<label for='subnet'>Subnet Mask:</label>");
  content += F("<input type='text' id='subnet' name='subnet' value='");
  content += settings.subnet;
  content += F("' placeholder='255.255.255.0'><br>");
  content += F("</div>");
  
  // Network settings
  content += F("<label for='useWiFi'>Use Wi-Fi:</label>");
  content += F("<input type='checkbox' id='useWiFi' name='useWiFi' ");
  content += settings.useWiFi ? F("checked") : F("");
  content += F("><br>");
  
  content += F("<label for='ssid'>SSID:</label>");
  content += F("<input type='text' id='ssid' name='ssid' value='");
  content += settings.ssid;
  content += F("'><br>");
  
  content += F("<label for='password'>Password:</label>");
  content += F("<input type='text' id='password' name='password' value='");
  content += settings.password;
  content += F("'><br>");
  
  // Submit button
  content += F("<input type='submit' value='Save'>");
  content += F("</form>");
  
  // Warning
  content += F("<div class='warning'>");
  content += F("<p><strong>Warning:</strong> Please ensure that the settings on the node (number of pixels/universes) are the same as in your software to prevent errors.</p>");
  content += F("</div>");

  // Add OTA update link to the bottom of the root page
  content += F("<div style='margin-top: 20px;'>");
  content += F("<a href='/update' style='display: inline-block; background-color: #007bff; color: white; padding: 10px 15px; text-decoration: none; border-radius: 4px;'>Firmware Update</a>");
  content += F("</div>");

  content += F("</body></html>");
  
  server.send(200, "text/html", content);
}

/**
 * Handle form submission
 */
void handleConfig() {
  if (server.method() == HTTP_POST) {
    // Update settings from form data
    if (server.hasArg("numledsoutput")) settings.numLedsPerOutput = server.arg("numledsoutput").toInt();
    if (server.hasArg("numoutput")) settings.numOutputs = server.arg("numoutput").toInt();
    if (server.hasArg("startuniverse")) settings.startUniverse = server.arg("startuniverse").toInt();
    if (server.hasArg("nodename")) settings.nodeName = server.arg("nodename");
    if (server.hasArg("ledbrightness")) settings.ledBrightness = server.arg("ledbrightness").toInt();
    if (server.hasArg("ssid")) settings.ssid = server.arg("ssid");
    if (server.hasArg("password")) settings.password = server.arg("password");
    if (server.hasArg("staticColor")) settings.staticColor = server.arg("staticColor");
    
    // Update boolean settings
    settings.useWiFi = server.hasArg("useWiFi");
    settings.ledCycleEnabled = server.hasArg("ledCycleEnabled");
    settings.enStatColor = server.hasArg("enStatColor");
    
    // Handle custom pin configuration
    bool wasCustomPinsEnabled = settings.enableCustomPins;
    settings.enableCustomPins = server.hasArg("enableCustomPins");

    settings.useStaticIP = server.hasArg("useStaticIP");
    if (server.hasArg("staticIP")) settings.staticIP = server.arg("staticIP");
    if (server.hasArg("gateway")) settings.gateway = server.arg("gateway");
    if (server.hasArg("subnet")) settings.subnet = server.arg("subnet");    
    
    // Track if pins have changed
    bool pinsChanged = false;
    
    // Reset pins if custom pins disabled
    if (wasCustomPinsEnabled && !settings.enableCustomPins) {
      resetToDefaultPins();
      pinsChanged = true;
    }
    
    // Update custom pin settings if enabled
    if (settings.enableCustomPins) {
      for (int i = 0; i < NUMSTRIPS; i++) {
        String pinArg = "pin" + String(i);
        if (server.hasArg(pinArg)) {
          int newPin = server.arg(pinArg).toInt();
          if (settings.pins[i] != newPin) {
            settings.pins[i] = newPin;
            pinsChanged = true;
          }
        }
      }
    }
    
    state.isStaticColorSet = false;
    if (server.hasArg("ledCycleEnabled")) {
      settings.ledCycleEnabled = true;
      settings.enStatColor = false;  // Disable static color when enabling cycle
    } else if (server.hasArg("enStatColor")) {
      settings.enStatColor = true;
      settings.ledCycleEnabled = false;  // Disable cycle when enabling static color
    } else {
      settings.ledCycleEnabled = false;
      settings.enStatColor = false;
    }
    // Save settings to preferences
    saveSettings();
    
    // Apply new pin settings to the LED strips
    if (pinsChanged) {
      updateStripPins();
      // Re-initialize LED driver with updated pins
      driver.initled(ledData, settings.pins, NUMSTRIPS, NUM_LEDS_PER_STRIP);
    }
    
    // Apply brightness
    driver.setBrightness(settings.ledBrightness);
    
    // Redirect back to root page
    server.sendHeader("Location", "/", true);
    server.send(302, "text/plain", "");
    
    // Restart if needed
    bool networkSettingsChanged = server.hasArg("ssid") || server.hasArg("password") || 
                                 server.hasArg("useWiFi") || server.hasArg("useStaticIP") ||
                                 server.hasArg("staticIP") || server.hasArg("gateway") ||
                                 server.hasArg("subnet"); server.hasArg("staticIP");
    
    if (pinsChanged || networkSettingsChanged || (!state.ledCycleEnabled && !settings.enStatColor)) {
      delay(500); // Give the browser time to receive the redirect response
      ESP.restart();
    }
  }
}

void handleOTAUpdate() {
  String content = F("<!DOCTYPE html><html><head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
  content += F("<link rel=\"icon\" href=\"data:,\">");
  content += F("<style>");
  content += CSS_STYLES;
  content += F("</style>");
  content += F("</head>");
  content += F("<body><h1>");
  content += settings.nodeName;
  content += F(" - OTA Update</h1>");
  content += F("<form method='POST' action='/doUpdate' enctype='multipart/form-data'>");
  content += F("<p>Select firmware .bin file to upload:</p>");
  content += F("<input type='file' name='update' accept='.bin'><br><br>");
  content += F("<input type='submit' value='Upload and Update'>");
  content += F("</form>");
  content += F("<div class='warning'>");
  content += F("<p><strong>Warning:</strong> Uploading incorrect firmware may brick your device. Make sure to upload the correct binary file.</p>");
  content += F("</div>");
  content += F("<p><a href='/'>Return to configuration</a></p>");
  content += F("</body></html>");
  
  server.send(200, "text/html", content);
}

/**
 * Handle the actual firmware update
 */
void handleDoUpdate() {
  // Check if file was uploaded
  HTTPUpload& upload = server.upload();
  
  if (upload.status == UPLOAD_FILE_START) {
    Serial.printf("Update: %s\n", upload.filename.c_str());
    
    // Display update status on OLED
    displayStatus("OTA Update", "Starting...");
    
    // Set status LED to purple to indicate update in progress
    setStatusLED(120, 0, 120);
    
    // Check if there's enough space for the update
    if (!Update.begin(UPDATE_SIZE_UNKNOWN)) {
      Update.printError(Serial);
      displayStatus("OTA Update", "Failed!", "Not enough space");
      setStatusLED(255, 0, 0); // Red for error
    }
  } else if (upload.status == UPLOAD_FILE_WRITE) {
    // Write uploaded file data to flash
    if (Update.write(upload.buf, upload.currentSize) != upload.currentSize) {
      Update.printError(Serial);
      displayStatus("OTA Update", "Failed!", "Write Error");
      setStatusLED(255, 0, 0); // Red for error
    } else {
      // Update progress on OLED
      float progress = (float)Update.progress() / (float)Update.size() * 100.0;
      displayStatus("OTA Update", "Progress: " + String(progress, 1) + "%");
    }
  } else if (upload.status == UPLOAD_FILE_END) {
    // Finish the update
    if (Update.end(true)) {
      Serial.printf("Update Success: %u bytes\n", upload.totalSize);
      displayStatus("OTA Update", "Complete!", "Rebooting...");
      setStatusLED(0, 255, 0); // Green for success
    } else {
      Update.printError(Serial);
      displayStatus("OTA Update", "Failed!", "Verify Error");
      setStatusLED(255, 0, 0); // Red for error
    }
  }
  
  yield();
}

/**
 * Handle the OTA update response after upload completes
 */
void handleOTAUpdateResponse() {
  if (Update.hasError()) {
    String content = F("<!DOCTYPE html><html><head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
    content += F("<link rel=\"icon\" href=\"data:,\">");
    content += F("<style>");
    content += CSS_STYLES;
    content += F("</style>");
    content += F("</head>");
    content += F("<body><h1>Update Failed!</h1>");
    content += F("<p>The update failed to complete. Please try again.</p>");
    content += F("<p><a href='/update'>Return to update page</a></p>");
    content += F("</body></html>");
    
    server.send(200, "text/html", content);
  } else {
    String content = F("<!DOCTYPE html><html><head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
    content += F("<link rel=\"icon\" href=\"data:,\">");
    content += F("<style>");
    content += CSS_STYLES;
    content += F("</style>");
    content += F("<meta http-equiv=\"refresh\" content=\"5;url=/\" />");
    content += F("<script>");
    content += F("var countdown = 5;");
    content += F("function updateCountdown() {");
    content += F("  document.getElementById('seconds').textContent = countdown;");
    content += F("  countdown--;");
    content += F("  if (countdown < 0) {");
    content += F("    document.getElementById('countdown').innerHTML = 'Redirecting...';");
    content += F("  } else {");
    content += F("    setTimeout(updateCountdown, 1000);");
    content += F("  }");
    content += F("}");
    content += F("window.onload = updateCountdown;");
    content += F("</script>");
    content += F("</head>");
    content += F("<body><h1>Update Successful!</h1>");
    content += F("<p id='countdown'>Device will reboot and redirect to main page in <span id='seconds'>5</span> seconds...</p>");
    content += F("</body></html>");
    
    server.send(200, "text/html", content);
    
    // Wait a moment for the client to get the response before rebooting
    delay(1000);
    ESP.restart();
  }
}
