// Define debugging and configuration settings
#define DEBUG_ETHERNET_WEBSERVER_PORT Serial
#define _ETHERNET_WEBSERVER_LOGLEVEL_ 3
#define UNIQUE_SUBARTNET

// Define configuration constants
#define NUM_LEDS_PER_STRIP 680 // Maximum number of LEDs per strip
#define NUMSTRIPS 8 // Number of LED strips
#define NB_CHANNEL_PER_LED 3  // Number of channels per LED (3 for RGB, 4 for RGBW)
#define UNIVERSE_SIZE_IN_CHANNEL 510  // Size of a universe (170 pixels * 3 channels)
#define COLOR_GRB // Define color order (Green-Red-Blue)

// Include necessary libraries
#include <Preferences.h>
#include "WebServer_WT32_ETH01.h" // Web server library for ESP32-ETH01
#include "I2SClocklessLedDriver.h" // Library to drive LEDs via I2S
#include "Arduino.h"
#include "artnetESP32V2.h" // Artnet library for ESP32

WebServer server(80);
Preferences preferences;

int numledsoutput = 680;
int numoutput = 3;
int startuniverse = 0;
int pins[NUMSTRIPS] = {15, 2, 0, 16};
String nodename = "Artnet Node ESP32";
String ssid = "";
String password = "";
bool useWiFi = false;
bool isAPMode = false;

artnetESP32V2 artnet = artnetESP32V2();
I2SClocklessLedDriver driver;

void displayfunction(void *param) {
    subArtnet *subartnet = (subArtnet *)param;
    driver.showPixels(NO_WAIT, subartnet->data);
}

// Function to handle the root page of the web server
void handleRoot() {
  String content = "<!DOCTYPE html><html><head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">";  
  content += "<link rel=\"icon\" href=\"data:,\">"; // Empty favicon
  content += "<style>";
  content += "body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f4f4f4; color: #333; text-align: center; }";
  content += "h1 { font-size: 24px; margin-bottom: 20px; }";
  content += "form { background-color: #fff; padding: 20px; padding-right: 40px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); max-width: 400px; margin: auto; }";
  content += "input[type='text'] { width: 100%; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-radius: 4px; font-size: 16px; }";
  content += "input[type='submit'] { background-color: #4CAF50; color: white; border: none; padding: 12px; font-size: 16px; cursor: pointer; border-radius: 4px; width: 100%; }";
  content += "input[type='submit']:hover { background-color: #45a049; }";
  content += ".warning { margin-top: 20px; color: #d9534f; font-size: 14px; }"; // Warning text style
  content += "</style></head>";
  
  content += "<body><h1>" + nodename + " Configuration</h1>";
  content += "<form method='POST' action='/config'>";
  content += "<label for='numledsoutput'>Number of LEDs per output (Max. 680):</label>";
  content += "<input type='text' id='numledsoutput' name='numledsoutput' value='" + String(numledsoutput) + "'><br>";
  
  content += "<label for='numoutput'>Number of outputs (Max. 4):</label>";
  content += "<input type='text' id='numoutput' name='numoutput' value='" + String(numoutput) + "'><br>";
  
  content += "<label for='startuniverse'>Start universe:</label>";
  content += "<input type='text' id='startuniverse' name='startuniverse' value='" + String(startuniverse) + "'><br>";
  
  content += "<label for='nodename'>Artnet Node name:</label>";
  content += "<input type='text' id='nodename' name='nodename' value='" + nodename + "'><br>";

  content += "<label for='useWiFi'>Use Wi-Fi:</label>";
  content += "<input type='checkbox' id='useWiFi' name='useWiFi' " + String(useWiFi ? "checked" : "") + "><br>";

  content += "<label for='ssid'>SSID:</label>";
  content += "<input type='text' id='ssid' name='ssid' value='" + ssid + "'><br>";

  content += "<label for='password'>Password:</label>";
  content += "<input type='text' id='password' name='password' value='" + password + "'><br>";
  
  content += "<input type='submit' value='Save'>";
  content += "</form>";

  // Warning section
  content += "<div class='warning'>";
  content += "<p><strong>Warning:</strong> Please ensure that the settings on the node (number of pixels/universes) are the same as in your software to prevent errors.</p>";
  content += "</div>";
  
  content += "</body></html>";
  
  server.send(200, "text/html", content); // Send HTML response
}

void handleConfig() {
    if (server.method() == HTTP_POST) {
        if (server.hasArg("numledsoutput")) numledsoutput = server.arg("numledsoutput").toInt();
        if (server.hasArg("numoutput")) numoutput = server.arg("numoutput").toInt();
        if (server.hasArg("startuniverse")) startuniverse = server.arg("startuniverse").toInt();
        if (server.hasArg("nodename")) nodename = server.arg("nodename");
        if (server.hasArg("ssid")) ssid = server.arg("ssid");
        if (server.hasArg("password")) password = server.arg("password");
        if (server.hasArg("useWiFi")) useWiFi = server.arg("useWiFi");


        preferences.begin("esp32config", false);
        preferences.putInt("numledsoutput", numledsoutput);
        preferences.putInt("numoutput", numoutput);
        preferences.putInt("startuniverse", startuniverse);
        preferences.putString("nodename", nodename);
        preferences.putString("ssid", ssid);
        preferences.putString("password", password);
        preferences.putBool("useWiFi", useWiFi);
        preferences.end();

        server.sendHeader("Location", "/", true);
        server.send(302, "text/plain", "");
        ESP.restart();
    }
}

void setupWiFi() {
    WiFi.begin(ssid.c_str(), password.c_str());
    unsigned long startAttemptTime = millis();

    while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 30000) {
        delay(1000);
        Serial.println("Connecting to Wi-Fi...");
    }

    if (WiFi.status() == WL_CONNECTED) {
        Serial.print("Wi-Fi connected. IP: ");
        Serial.println(WiFi.localIP());

        server.on("/", HTTP_GET, handleRoot);
        server.on("/config", HTTP_POST, handleConfig);
        server.begin();
        Serial.println("HTTP server started (Wi-Fi).");
    } else {
        Serial.println("Wi-Fi connection failed, starting AP mode.");
        startAPMode();
    }
}

void setupEthernet() {
    WT32_ETH01_onEvent();
    ETH.begin();
    unsigned long startAttemptTime = millis();

    while (!ETH.linkUp() && millis() - startAttemptTime < 30000) {
        delay(1000);
        Serial.println("Connecting to Ethernet...");
    }

    if (ETH.linkUp()) {
        Serial.print("Ethernet connected. IP: ");
        Serial.println(ETH.localIP());

        server.on("/", HTTP_GET, handleRoot);
        server.on("/config", HTTP_POST, handleConfig);
        server.begin();
        Serial.println("HTTP server started (Ethernet).");
    } else {
        Serial.println("Ethernet connection failed, starting AP mode.");
        startAPMode();
    }
}

void startAPMode() {
    isAPMode = true;
    WiFi.softAP(nodename.c_str());
    IPAddress IP = WiFi.softAPIP();
    Serial.print("AP Mode started. Connect to Wi-Fi SSID: ");
    Serial.println(nodename);
    Serial.print("Access Point IP: ");
    Serial.println(IP);

    server.on("/", HTTP_GET, handleRoot);
    server.on("/config", HTTP_POST, handleConfig);
    server.begin();
    Serial.println("HTTP server started (AP mode).");
}

void setup() {
    Serial.begin(115200);

    preferences.begin("esp32config", true);
    numledsoutput = preferences.getInt("numledsoutput", numledsoutput);
    numoutput = preferences.getInt("numoutput", numoutput);
    startuniverse = preferences.getInt("startuniverse", startuniverse);
    nodename = preferences.getString("nodename", nodename);
    ssid = preferences.getString("ssid", ssid);
    password = preferences.getString("password", password);
    useWiFi = preferences.getBool("useWiFi", useWiFi);
    preferences.end();

    driver.initled(NULL, pins, NUMSTRIPS, NUM_LEDS_PER_STRIP);
    driver.setBrightness(20);

    if (useWiFi) {
        setupWiFi();
    } else {
        setupEthernet();
    }

    if (!isAPMode) {
        IPAddress activeIP = useWiFi ? WiFi.localIP() : ETH.localIP();
        artnet.addSubArtnet(startuniverse, numledsoutput * numoutput * NB_CHANNEL_PER_LED, UNIVERSE_SIZE_IN_CHANNEL, &displayfunction);
        artnet.setNodeName(nodename);

        if (artnet.listen(activeIP, 6454)) {
            Serial.print("Artnet Listening on IP: ");
            Serial.println(activeIP);
        }
    }
}

void loop() {
    server.handleClient();
    if (!isAPMode && useWiFi && WiFi.status() != WL_CONNECTED) {
        Serial.println("Wi-Fi disconnected, restarting AP mode...");
        startAPMode();
    } else if (!isAPMode && !useWiFi && !ETH.linkUp()) {
        Serial.println("Ethernet disconnected, restarting AP mode...");
        startAPMode();
    }
}
